// http://nodejs.cn/api/fs.html
// fs - 文件系统
const fs = require('fs')

// http://nodejs.cn/api/path.html
// path - 路径
const path = require('path')

// https://segmentfault.com/a/1190000012939607
// lru-cache 用于在内存中管理缓存数据，并且支持LRU算法。可以让程序不依赖任何外部数据库实现缓存管理。
const LRU = require('lru-cache')

// http://www.expressjs.com.cn/
const express = require('express')

// https://www.npmjs.com/package/serve-favicon
// 用于请求网页的 logo
const favicon = require('serve-favicon')

// https://www.npmjs.com/package/compression
//  对发给客户端的大响应提供Gzip压缩支持
const compression = require('compression')

// https://www.npmjs.com/package/route-cache
// 缓存 express 路由数据。某些路由数据计算过程耗时比较长，数据实时性要求低，此时可以缓存计算的结果
const microcache = require('route-cache')

// 获取绝对路径
const resolve = file => path.resolve(__dirname, file)

// 使用（可选的）选项创建一个 Renderer 实例 https://ssr.vuejs.org/zh/api/#createrenderer
const {
  createBundleRenderer
} = require('vue-server-renderer')

// 判断是否生成环境
const isProd = process.env.NODE_ENV === 'production'

// 判断是否缓存
const useMicroCache = process.env.MICRO_CACHE !== 'false'

// 服务端信息
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

function createRenderer(bundle, options) {
  // https://ssr.vuejs.org/zh/guide/bundle-renderer.html#%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC-ssr-%E7%9A%84%E9%97%AE%E9%A2%98
  // 使用 createBundleRenderer 可以让服务端也热更新，不用重启服务
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // 只有在所生成的 bundle 文件与外部的 NPM 依赖模块放置在不同位置
    // 或者 vue-server-renderer 是通过 NPM link 链接到当前项目中时，才需要配置此选项。
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  // 在生产模式：使用模板和打包好的服务器包创建服务器渲染器
  // 服务器包由 vue-ssr-webpack-plugin 生成。
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  // 在通过 webpack 的按需代码分割特性渲染 bundle 时，我们可以确保对 chunk 进行最优化的资源预加载/数据预取
  // 并且还可以将所需的异步 chunk 智能地注入为 <script> 标签，以避免客户端的瀑布式请求(waterfall request)
  // 以及改善可交互时间(TTI - time-to-interactive)
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

// express.static 是 Express 内置的唯一一个中间件
// 是基于 serve-static 开发的，负责托管 Express 应用内的静态资源
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({
  threshold: 0
}))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// 因为这个 app 没有用户特定内容，每一个页面都可以被缓存
// 如果 app 涉及到用户特定的内容，必须根据页面地址和头文件来确定是否缓存页面
// 1s 缓存
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render(req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'Vue HN 2.0', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8089
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})